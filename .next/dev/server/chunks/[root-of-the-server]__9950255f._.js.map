{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Montech.DESKTOP-HFD37TP/Desktop/life-crime-game/lib/supabase/server.ts"],"sourcesContent":["// lib/supabase/server.ts\r\nimport { createServerClient } from '@supabase/ssr'\r\nimport { cookies } from 'next/headers'\r\n\r\nexport async function createClient() {\r\n  const cookieStore = await cookies()\r\n\r\n  return createServerClient(\r\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\r\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\r\n    {\r\n      cookies: {\r\n        getAll() {\r\n          return cookieStore.getAll()\r\n        },\r\n        setAll(cookiesToSet) {\r\n          try {\r\n            cookiesToSet.forEach(({ name, value, options }) =>\r\n              cookieStore.set(name, value, options)\r\n            )\r\n          } catch {\r\n            // Server Component\r\n          }\r\n        },\r\n      },\r\n    }\r\n  )\r\n}"],"names":[],"mappings":"AAAA,yBAAyB;;;;;AACzB;AAAA;AACA;;;AAEO,eAAe;IACpB,MAAM,cAAc,MAAM,IAAA,+RAAO;IAEjC,OAAO,IAAA,kVAAkB,sUAGvB;QACE,SAAS;YACP;gBACE,OAAO,YAAY,MAAM;YAC3B;YACA,QAAO,YAAY;gBACjB,IAAI;oBACF,aAAa,OAAO,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE,GAC5C,YAAY,GAAG,CAAC,MAAM,OAAO;gBAEjC,EAAE,OAAM;gBACN,mBAAmB;gBACrB;YACF;QACF;IACF;AAEJ","debugId":null}},
    {"offset": {"line": 119, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Montech.DESKTOP-HFD37TP/Desktop/life-crime-game/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined\r\n}\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient()\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 132, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Montech.DESKTOP-HFD37TP/Desktop/life-crime-game/app/api/travel/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server'\r\nimport { createClient } from '@/lib/supabase/server'\r\nimport { prisma } from '@/lib/prisma'\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const supabase = await createClient()\r\n    const { data: { user } } = await supabase.auth.getUser()\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\r\n    }\r\n\r\n    const { cityId } = await request.json()\r\n\r\n    if (!cityId) {\r\n      return NextResponse.json({ error: 'City ID required' }, { status: 400 })\r\n    }\r\n\r\n    const character = await prisma.character.findUnique({\r\n      where: { userId: user.id },\r\n      include: { city: true }\r\n    })\r\n\r\n    if (!character) {\r\n      return NextResponse.json({ error: 'Character not found' }, { status: 404 })\r\n    }\r\n\r\n    const destinationCity = await prisma.city.findUnique({\r\n      where: { id: cityId }\r\n    })\r\n\r\n    if (!destinationCity) {\r\n      return NextResponse.json({ error: 'City not found' }, { status: 404 })\r\n    }\r\n\r\n    if (character.cityId === cityId) {\r\n      return NextResponse.json(\r\n        { error: 'You are already in this city' },\r\n        { status: 400 }\r\n      )\r\n    }\r\n\r\n    if (character.level < destinationCity.minLevel) {\r\n      return NextResponse.json(\r\n        { \r\n          error: `You need to be level ${destinationCity.minLevel} to travel to ${destinationCity.name}`,\r\n          requiredLevel: destinationCity.minLevel,\r\n          currentLevel: character.level\r\n        },\r\n        { status: 403 }\r\n      )\r\n    }\r\n\r\n    const isDifferentCountry = character.city?.country !== destinationCity.country\r\n\r\n    if (isDifferentCountry && destinationCity.requiresPlane && !character.hasPlane) {\r\n      return NextResponse.json(\r\n        { \r\n          error: `You need a plane to travel to ${destinationCity.country}. Buy one in the Market!`,\r\n          requiresPlane: true\r\n        },\r\n        { status: 403 }\r\n      )\r\n    }\r\n\r\n    if (!isDifferentCountry && destinationCity.requiresCar) {\r\n      if (!character.hasDriverLicense) {\r\n        return NextResponse.json(\r\n          { \r\n            error: `You need a driver's license to travel to ${destinationCity.name}`,\r\n            requiresLicense: true\r\n          },\r\n          { status: 403 }\r\n        )\r\n      }\r\n\r\n      if (!character.hasCar) {\r\n        return NextResponse.json(\r\n          { \r\n            error: `You need a car to travel to ${destinationCity.name}. Buy one in the Market!`,\r\n            requiresCar: true\r\n          },\r\n          { status: 403 }\r\n        )\r\n      }\r\n    }\r\n\r\n    const baseCost = isDifferentCountry ? 5000 : 1000\r\n    const levelMultiplier = destinationCity.minLevel\r\n    const travelCost = baseCost * levelMultiplier\r\n\r\n    if (character.money < travelCost) {\r\n      return NextResponse.json(\r\n        { \r\n          error: `Not enough money. Travel costs $${travelCost.toLocaleString()}`,\r\n          cost: travelCost,\r\n          currentMoney: character.money\r\n        },\r\n        { status: 403 }\r\n      )\r\n    }\r\n\r\n    const energyCost = isDifferentCountry ? 50 : 25\r\n    if (character.energy < energyCost) {\r\n      return NextResponse.json(\r\n        { \r\n          error: `Not enough energy. Travel requires ${energyCost} energy`,\r\n          cost: energyCost,\r\n          currentEnergy: character.energy\r\n        },\r\n        { status: 403 }\r\n      )\r\n    }\r\n\r\n    const updatedCharacter = await prisma.character.update({\r\n      where: { userId: user.id },\r\n      data: {\r\n        cityId,\r\n        money: character.money - travelCost,\r\n        energy: character.energy - energyCost\r\n      },\r\n      include: { city: true }\r\n    })\r\n\r\n    // Get username for event\r\n    const username = user.user_metadata?.username || user.email?.split('@')[0] || 'Player'\r\n\r\n    await prisma.gameEvent.create({\r\n      data: {\r\n        type: 'travel',\r\n        message: `${username} traveled from ${character.city?.name || 'Unknown'} to ${destinationCity.name}`,\r\n        userId: user.id,\r\n        username: username\r\n      }\r\n    })\r\n\r\n    return NextResponse.json({ \r\n      message: `Successfully traveled to ${destinationCity.name}`,\r\n      character: updatedCharacter,\r\n      cost: travelCost\r\n    })\r\n  } catch (error) {\r\n    console.error('❌ POST /api/travel error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Failed to travel' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}\r\n\r\nexport async function GET() {\r\n  try {\r\n    const supabase = await createClient()\r\n    const { data: { user } } = await supabase.auth.getUser()\r\n\r\n    if (!user) {\r\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })\r\n    }\r\n\r\n    const character = await prisma.character.findUnique({\r\n      where: { userId: user.id },\r\n      include: { city: true }\r\n    })\r\n\r\n    if (!character) {\r\n      return NextResponse.json({ error: 'Character not found' }, { status: 404 })\r\n    }\r\n\r\n    const cities = await prisma.city.findMany({\r\n      orderBy: [\r\n        { country: 'asc' },\r\n        { minLevel: 'asc' }\r\n      ]\r\n    })\r\n\r\n    const citiesByCountry: Record<string, any[]> = {}\r\n\r\n    cities.forEach(city => {\r\n      const isDifferentCountry = character.city?.country !== city.country\r\n      const isCurrentCity = character.cityId === city.id\r\n      \r\n      const meetsLevelReq = character.level >= city.minLevel\r\n      const hasLicense = character.hasDriverLicense\r\n      const hasCar = character.hasCar\r\n      const hasPlane = character.hasPlane\r\n\r\n      let canTravel = meetsLevelReq && !isCurrentCity\r\n      let blockedReason = ''\r\n\r\n      if (!meetsLevelReq) {\r\n        canTravel = false\r\n        blockedReason = `Requires Level ${city.minLevel}`\r\n      } else if (isDifferentCountry && city.requiresPlane && !hasPlane) {\r\n        canTravel = false\r\n        blockedReason = 'Requires Plane'\r\n      } else if (!isDifferentCountry && city.requiresCar && !hasCar) {\r\n        canTravel = false\r\n        blockedReason = 'Requires Car'\r\n      } else if (!isDifferentCountry && city.requiresCar && !hasLicense) {\r\n        canTravel = false\r\n        blockedReason = \"Requires Driver's License\"\r\n      }\r\n\r\n      const baseCost = isDifferentCountry ? 5000 : 1000\r\n      const travelCost = baseCost * city.minLevel\r\n      const energyCost = isDifferentCountry ? 50 : 25\r\n\r\n      const cityInfo = {\r\n        ...city,\r\n        isCurrentCity,\r\n        isDifferentCountry,\r\n        canTravel,\r\n        blockedReason,\r\n        travelCost,\r\n        energyCost,\r\n        requirements: {\r\n          level: city.minLevel,\r\n          car: city.requiresCar,\r\n          plane: city.requiresPlane,\r\n          license: city.requiresCar\r\n        }\r\n      }\r\n\r\n      if (!citiesByCountry[city.country]) {\r\n        citiesByCountry[city.country] = []\r\n      }\r\n      citiesByCountry[city.country].push(cityInfo)\r\n    })\r\n\r\n    return NextResponse.json({ \r\n      citiesByCountry,\r\n      currentCity: character.city,\r\n      characterLevel: character.level,\r\n      hasDriverLicense: character.hasDriverLicense,\r\n      hasCar: character.hasCar,\r\n      hasPlane: character.hasPlane\r\n    })\r\n  } catch (error) {\r\n    console.error('❌ GET /api/travel error:', error)\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch destinations' },\r\n      { status: 500 }\r\n    )\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}