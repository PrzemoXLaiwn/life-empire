// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/types.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../../app/(auth)/login/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/login">> = Specific
  const handler = {} as typeof import("../../../app/(auth)/login/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/(auth)/register/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/register">> = Specific
  const handler = {} as typeof import("../../../app/(auth)/register/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/city-selection/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/city-selection">> = Specific
  const handler = {} as typeof import("../../../app/city-selection/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/airport/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/airport">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/airport/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/business/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/business">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/business/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/city/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/city">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/city/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/combat/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/combat">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/combat/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/crime/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/crime">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/crime/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/education/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/education">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/education/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/gang/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/gang">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/gang/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/jobs/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/jobs">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/jobs/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/leaderboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/leaderboard">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/leaderboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/market/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/market">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/market/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/profile/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/profile">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/profile/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/properties/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/properties">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/properties/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/settings/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/settings">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/settings/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/stats/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/stats">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/stats/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/dashboard/travel/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/dashboard/travel">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/travel/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/page.tsx
{
  type __IsExpected<Specific extends AppPageConfig<"/">> = Specific
  const handler = {} as typeof import("../../../app/page.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/(auth)/callback/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/callback">> = Specific
  const handler = {} as typeof import("../../../app/(auth)/callback/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/character/city/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/character/city">> = Specific
  const handler = {} as typeof import("../../../app/api/character/city/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/character/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/character">> = Specific
  const handler = {} as typeof import("../../../app/api/character/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/chat/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/chat">> = Specific
  const handler = {} as typeof import("../../../app/api/chat/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/cities/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/cities">> = Specific
  const handler = {} as typeof import("../../../app/api/cities/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/cities/seed/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/cities/seed">> = Specific
  const handler = {} as typeof import("../../../app/api/cities/seed/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/crime/commit/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/crime/commit">> = Specific
  const handler = {} as typeof import("../../../app/api/crime/commit/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/events/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/events">> = Specific
  const handler = {} as typeof import("../../../app/api/events/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/api/travel/route.ts
{
  type __IsExpected<Specific extends RouteHandlerConfig<"/api/travel">> = Specific
  const handler = {} as typeof import("../../../app/api/travel/route.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}





// Validate ../../../app/dashboard/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/dashboard">> = Specific
  const handler = {} as typeof import("../../../app/dashboard/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}

// Validate ../../../app/layout.tsx
{
  type __IsExpected<Specific extends LayoutConfig<"/">> = Specific
  const handler = {} as typeof import("../../../app/layout.js")
  type __Check = __IsExpected<typeof handler>
  // @ts-ignore
  type __Unused = __Check
}
