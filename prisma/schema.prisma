generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model City {
  id            String      @id @default(cuid())
  name          String      @unique
  country       String
  description   String
  incomeBonus   Int         @default(0)
  crimeBonus    Int         @default(0)
  trainingBonus Int         @default(0)
  businessBonus Int         @default(0)
  minLevel      Int         @default(1)
  createdAt     DateTime    @default(now())
  requiresCar   Boolean     @default(false)
  requiresPlane Boolean     @default(false)
  characters    Character[]

  @@map("cities")
}

model Character {
  id                 String         @id @default(cuid())
  userId             String         @unique
  money              Int            @default(1000)
  energy             Int            @default(100)
  maxEnergy          Int            @default(100)
  health             Int            @default(100)
  maxHealth          Int            @default(100)
  level              Int            @default(1)
  xp                 Int            @default(0)
  xpNeeded           Int            @default(100)
  age                Int            @default(18)
  ageInDays          Int            @default(0)
  reputation         Int            @default(0)
  rank               Int            @default(1)
  education          String?
  job                String?
  jobTitle           String?
  salary             Int            @default(0)
  strength           Int            @default(10)
  defense            Int            @default(10)
  speed              Int            @default(10)
  dexterity          Int            @default(10)
  crimesCommitted    Int            @default(0)
  jailTime           Int            @default(0)
  criminalReputation Int            @default(0)
  lastEnergyRegen    DateTime       @default(now())
  lastHealthRegen    DateTime       @default(now())
  lastAgeIncrement   DateTime       @default(now())
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  cityId             String?
  hasCar             Boolean        @default(false)
  hasDriverLicense   Boolean        @default(false)
  hasPlane           Boolean        @default(false)
  avatar             String?        @default("crown")
  customAvatar       String?
  city               City?          @relation(fields: [cityId], references: [id])
  crimeHistory       CrimeHistory[]

  @@index([cityId])
  @@map("characters")
}

model CrimeHistory {
  id          String    @id @default(cuid())
  characterId String
  crimeType   String
  success     Boolean
  moneyGained Int       @default(0)
  xpGained    Int       @default(0)
  jailTime    Int       @default(0)
  timestamp   DateTime  @default(now())
  character   Character @relation(fields: [characterId], references: [id], onDelete: Cascade)

  @@index([characterId])
  @@index([timestamp])
  @@map("crime_history")
}

model GameEvent {
  id        String   @id @default(cuid())
  type      String
  message   String
  userId    String?
  createdAt DateTime @default(now())
  username  String?
  avatar    String?

  @@index([createdAt])
  @@index([userId])
  @@map("game_events")
}

model ChatMessage {
  id        String   @id @default(cuid())
  userId    String
  username  String
  message   String
  createdAt DateTime @default(now())
  avatar    String?  @default("crown")

  @@index([createdAt])
  @@map("chat_messages")
}
